<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	version="3.1">
	
	
	<!-- 1. SpringFrameWork의 동작원리
		
		index.jsp에서 프로젝트를 run 실행시키면 404에러가 날 수 밖에 없다.
		index.jsp가 위치한 WEB_INF 폴더는 설정 파일을 담고 있는 중요한 폴더이기 때문에 
		외부에서의 직접적인 접근을 막고 있기 때문이다.
		
		그렇다면 어떤 방식으로 index.jsp파일을 실행 시킬 수 있을까?
		
		이를 이해하기 위해서는 SpringFrameWork의 동작원리를 이해하여야한다.
		
		먼저 클라이언트로부터 요청(request)가 들어오면, 제일 먼저 web.xml이 실행된다.
		이후 servelet-context.xml
		-> IndexController -> servelet-context.xml
		-> index.jsp
		-> web.xml 순으로
		
		
		DispatcherServelet이 요청을 가로채고 servelet-context.xml을 실행시킨다.
		
		web.xml에서는 요청에 대해 가장 먼저 처리를 시작한다.
		여기서는 DispatcherServlet을 주목해야하는데, 
		
		web.xml에서 다른 처리로 넘어가기 전에
		이 DispatcherServelet이 <url-pattern>의 형태로 들어오는 요청을 가로채어 servelet-context.xml로 넘겨버린다.
		 
	
	 -->

	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
			    /WEB-INF/classes/config/context-servlet.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<filter>
	  	<filter-name>encodingFilter</filter-name>
	  	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	  	<init-param>
	  		<param-name>encoding</param-name>
	  		<param-value>UTF-8</param-value>
	  	</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
	  	<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	
	
	
	
</web-app>